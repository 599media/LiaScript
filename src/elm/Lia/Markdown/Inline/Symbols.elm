module Lia.Markdown.Inline.Symbols exposing (arrows, smileys)

import Combine exposing (Parser, choice, map, onsuccess, string)
import Lia.Markdown.Inline.Types exposing (Annotation, Inline(..))
import Lia.Parser.State exposing (State)


arrows : Parser s (Annotation -> Inline)
arrows =
    choice
        [ string "<-->" |> onsuccess "‚ü∑"
        , string "<--" |> onsuccess "‚üµ"
        , string "-->" |> onsuccess "‚ü∂"
        , string "<<-" |> onsuccess "‚Üû"
        , string "->>" |> onsuccess "‚Ü†"
        , string "<->" |> onsuccess "‚Üî"
        , string ">->" |> onsuccess "‚Ü£"
        , string "<-<" |> onsuccess "‚Ü¢"
        , string "->" |> onsuccess "‚Üí"
        , string "<-" |> onsuccess "‚Üê"
        , string "<~" |> onsuccess "‚Üú"
        , string "~>" |> onsuccess "‚Üù"
        , string "<==>" |> onsuccess "‚ü∫"
        , string "==>" |> onsuccess "‚üπ"
        , string "<==" |> onsuccess "‚ü∏"
        , string "<=>" |> onsuccess "‚áî"
        , string "=>" |> onsuccess "‚áí"
        , string "<=" |> onsuccess "‚áê"
        ]
        |> map Symbol


smileys : Parser s (Annotation -> Inline)
smileys =
    choice
        [ string ":-)" |> onsuccess "üôÇ"
        , string ";-)" |> onsuccess "üòâ"
        , string ":-D" |> onsuccess "üòÄ"
        , string ":-O" |> onsuccess "üòÆ"
        , string ":-(" |> onsuccess "üôÅ"
        , string ":-|" |> onsuccess "üòê"
        , string ":-/" |> onsuccess "üòï"
        , string ":-P" |> onsuccess "üòõ"
        , string ";-P" |> onsuccess "üòú"
        , string ":-*" |> onsuccess "üòó"
        , string ":')" |> onsuccess "üòÇ"
        , string ":'(" |> onsuccess "üò¢"
        ]
        |> map Symbol
